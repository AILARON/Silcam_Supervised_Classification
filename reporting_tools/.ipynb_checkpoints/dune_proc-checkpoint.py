{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from pathlib import Path\n",
    "\n",
    "def proc_watervel(df):\n",
    "    if (df['validity (bitfield)'].dtype == 'object'):\n",
    "        valid = ' VEL_X|VEL_Y|VEL_Z'\n",
    "    else:\n",
    "        valid = 0b0111\n",
    "    df.loc[df['validity (bitfield)'] != valid, -3:] = np.nan\n",
    "    df.drop(columns='validity (bitfield)', inplace=True)\n",
    "    new_names = [(i,'wv_'+i) for i in df.iloc[:, -3:].columns.values]\n",
    "    df.rename(columns = dict(new_names), inplace=True)\n",
    "    return df\n",
    "\n",
    "def proc_eststate(df):\n",
    "    df['lon (rad)'] = df['lon (rad)']*(180 / np.pi)\n",
    "    df['lat (rad)'] = df['lat (rad)']*(180 / np.pi)\n",
    "    df.rename(columns={'lon (rad)': 'lon (°)', \n",
    "                       'lat (rad)': 'lat (°)'}, inplace=True)\n",
    "    return df\n",
    "\n",
    "special_data_proc = {\n",
    "    'WaterVelocity': proc_watervel,\n",
    "    'EstimatedState':proc_eststate,\n",
    "    'Temperature':   (lambda df: df[df.entity == 'SmartX']),\n",
    "    'Pressure':      (lambda df: df[df.entity == 'SmartX']),\n",
    "    'Acceleration':  (lambda df: df.add_prefix('acc_')),\n",
    "}\n",
    "\n",
    "def proc_dune_df(name, df):\n",
    "    df.columns = df.columns.str.strip()\n",
    "    df.timestamp = pd.to_datetime(df.timestamp, utc=True, unit='s')\n",
    "    df = df.loc[~df.timestamp.duplicated(keep='first')]\n",
    "    df.set_index('timestamp',verify_integrity=True, inplace=True)\n",
    "    if name in special_data_proc.keys():\n",
    "        df = special_data_proc[name](df)\n",
    "    if df.entity.unique().size > 1:\n",
    "        print(\"Warning: \",name, \" has multiple sources:\", df.entity.unique())\n",
    "    df.drop(columns=['system', 'entity'], inplace=True)\n",
    "    df.columns, units = zip(*df.columns.str.split(' '))\n",
    "    df.rename(columns={\"value\": name}, inplace=True)\n",
    "    return df, units\n",
    "\n",
    "\n",
    "def load_neptus_csvs(path):\n",
    "    \n",
    "    try:\n",
    "        path = Path(path)\n",
    "    except TypeError as e:\n",
    "        print('TypeError: path', e)\n",
    "        print('path = ', path)\n",
    "        return None, None\n",
    "    if not path.exists():\n",
    "        print('Path does not exists')\n",
    "        return None, None\n",
    "    if path.suffix == '.csv':\n",
    "        files = [path]\n",
    "    elif path.is_dir():\n",
    "        files = [f for f in path.glob('*.csv')]\n",
    "    else:\n",
    "        print('Path must be .csv or directory')\n",
    "        return None, None\n",
    "    if not files:\n",
    "        print(\"Using last edited subfolder\")\n",
    "        _, file = max((f.stat().st_ctime, f) for f in path.rglob('*.csv'))\n",
    "        print(\"Date: \", file.parents[3].name)\n",
    "        print(\"Plan: \", file.parents[2].name)\n",
    "        files = [f for f in file.parent.glob('*.csv')]\n",
    "    if not files:\n",
    "        print(\"No csv found in directory or subfolders\")\n",
    "        return None, None\n",
    "        \n",
    "    \n",
    "    mdf = None\n",
    "    units = {}\n",
    "    tol = pd.Timedelta('250ms')\n",
    "    for f in files:\n",
    "        name = f.stem\n",
    "        df = pd.read_csv(f)\n",
    "        df, unit = proc_dune_df(name, df)\n",
    "        units.update(zip(df.columns, unit))\n",
    "        if mdf is None:\n",
    "            mdf = df\n",
    "        else:\n",
    "            mdf = pd.merge_asof(mdf, df, on='timestamp', direction='nearest', tolerance=tol)\n",
    "\n",
    "    mdf.set_index('timestamp',verify_integrity=True, inplace=True)\n",
    "    \n",
    "    return mdf, units"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:silcamfw]",
   "language": "python",
   "name": "conda-env-silcamfw-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
